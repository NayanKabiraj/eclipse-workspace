package com.guiautomation.Base;

import java.io.FileInputStream;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Parameters;

import com.relevantcodes.extentreports.ExtentTest;
import com.github.dockerjava.transport.DockerHttpClient.Request.Method;
import com.relevantcodes.extentreports.ExtentReports;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseTest {
	

	WebDriver driver;
	WebDriverManager drvManager;
	public Page page;
	public Properties prop;
	FileInputStream ip;
	static String propLoc=System.getProperty("user.dir")+ "/src/main/java/com/fcom/configuration/";
	ExtentTest test;
	ExtentReports er;
	
	

	@BeforeMethod
	@Parameters({"BROWSER","ENVIRONMENT"}) 
	public void setUpTest(String BROWSER, String ENVIRONMENT) {
		prop= new Properties();
		if (BROWSER.equalsIgnoreCase("chrome")) {
			drvManager.chromedriver().setup();
			driver= new ChromeDriver();
			Reporter.log(BROWSER+ " Invoked successfully");
		}
		else if (BROWSER.equalsIgnoreCase("ff")) {
			drvManager.firefoxdriver().setup();
			driver= new FirefoxDriver();
			Reporter.log(BROWSER+ " Invoked successfully");
		}
		else if (BROWSER.equalsIgnoreCase("ie")) {
			drvManager.iedriver().setup();
			driver= new InternetExplorerDriver();
			Reporter.log(BROWSER+ " Invoked successfully");
		}
		else {
			System.out.println(BROWSER+ " is not a configured browser");
			Reporter.log(BROWSER+ " is not a configured browser");
		}
		try {
		if (ENVIRONMENT.equalsIgnoreCase("TST")) {
				ip=new FileInputStream(propLoc + "TST.properties");
			}
		else if(ENVIRONMENT.equalsIgnoreCase("STAGE")) {
			ip=new FileInputStream( propLoc + "STAGE.properties");
		}
		else if(ENVIRONMENT.equalsIgnoreCase("PROD")) {
			ip=new FileInputStream( propLoc + "PROD.properties");
		}
		prop.load(ip);
		Reporter.log(ENVIRONMENT+ " configuration set up successfully");
		}catch(Exception e) {
			System.out.println(e.getMessage());
		}
		driver.manage().window().maximize();
		Reporter.log(" Navigating to : " + prop.getProperty("URL") );
		driver.get(prop.getProperty("URL"));
		page= new Action(driver);
	}

	@AfterMethod
	public void tearDown() {
		driver.close();
		driver.quit();
	}
	
	
	
	

}
